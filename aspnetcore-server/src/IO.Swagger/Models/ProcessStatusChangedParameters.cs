/*
 * Callback Server for Workflow Server API
 *
 * Describes CallbackApi, a set of methods that will be called by the WFS, to execute external Actions, Conditions and Rules.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: sales@optimajet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProcessStatusChangedParameters : IEquatable<ProcessStatusChangedParameters>
    { 
        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [Required]
        [DataMember(Name="ProcessId")]
        public Guid? ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets SchemeCode
        /// </summary>
        [Required]
        [DataMember(Name="SchemeCode")]
        public string SchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstance
        /// </summary>
        [DataMember(Name="ProcessInstance")]
        public ProcessInfo ProcessInstance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessStatusChangedParameters {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  SchemeCode: ").Append(SchemeCode).Append("\n");
            sb.Append("  ProcessInstance: ").Append(ProcessInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProcessStatusChangedParameters)obj);
        }

        /// <summary>
        /// Returns true if ProcessStatusChangedParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessStatusChangedParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessStatusChangedParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProcessId == other.ProcessId ||
                    ProcessId != null &&
                    ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    SchemeCode == other.SchemeCode ||
                    SchemeCode != null &&
                    SchemeCode.Equals(other.SchemeCode)
                ) && 
                (
                    ProcessInstance == other.ProcessInstance ||
                    ProcessInstance != null &&
                    ProcessInstance.Equals(other.ProcessInstance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProcessId != null)
                    hashCode = hashCode * 59 + ProcessId.GetHashCode();
                    if (SchemeCode != null)
                    hashCode = hashCode * 59 + SchemeCode.GetHashCode();
                    if (ProcessInstance != null)
                    hashCode = hashCode * 59 + ProcessInstance.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProcessStatusChangedParameters left, ProcessStatusChangedParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProcessStatusChangedParameters left, ProcessStatusChangedParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
