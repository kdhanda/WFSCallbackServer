/*
 * Callback Server for Workflow Server API
 *
 * Describes CallbackApi, a set of methods that will be called by the WFS, to execute external Actions, Conditions and Rules.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: sales@optimajet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GeneratorParameters : IEquatable<GeneratorParameters>
    { 
        /// <summary>
        /// Gets or Sets SchemeCode
        /// </summary>
        [Required]
        [DataMember(Name="SchemeCode")]
        public string SchemeCode { get; set; }

        /// <summary>
        /// Gets or Sets SchemeId
        /// </summary>
        [Required]
        [DataMember(Name="SchemeId")]
        public Guid? SchemeId { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="Parameters")]
        public string Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Scheme
        /// </summary>
        [Required]
        [DataMember(Name="Scheme")]
        public string Scheme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeneratorParameters {\n");
            sb.Append("  SchemeCode: ").Append(SchemeCode).Append("\n");
            sb.Append("  SchemeId: ").Append(SchemeId).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GeneratorParameters)obj);
        }

        /// <summary>
        /// Returns true if GeneratorParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of GeneratorParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneratorParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SchemeCode == other.SchemeCode ||
                    SchemeCode != null &&
                    SchemeCode.Equals(other.SchemeCode)
                ) && 
                (
                    SchemeId == other.SchemeId ||
                    SchemeId != null &&
                    SchemeId.Equals(other.SchemeId)
                ) && 
                (
                    Parameters == other.Parameters ||
                    Parameters != null &&
                    Parameters.Equals(other.Parameters)
                ) && 
                (
                    Scheme == other.Scheme ||
                    Scheme != null &&
                    Scheme.Equals(other.Scheme)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SchemeCode != null)
                    hashCode = hashCode * 59 + SchemeCode.GetHashCode();
                    if (SchemeId != null)
                    hashCode = hashCode * 59 + SchemeId.GetHashCode();
                    if (Parameters != null)
                    hashCode = hashCode * 59 + Parameters.GetHashCode();
                    if (Scheme != null)
                    hashCode = hashCode * 59 + Scheme.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GeneratorParameters left, GeneratorParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GeneratorParameters left, GeneratorParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
